"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FindManyStateResolver = void 0;
const tslib_1 = require("tslib");
const TypeGraphQL = tslib_1.__importStar(require("type-graphql"));
const FindManyStateArgs_1 = require("./args/FindManyStateArgs");
const State_1 = require("../../../models/State");
const helpers_1 = require("../../../helpers");
let FindManyStateResolver = class FindManyStateResolver {
    async states(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).state.findMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
};
exports.FindManyStateResolver = FindManyStateResolver;
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => [State_1.State], {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args(_type => FindManyStateArgs_1.FindManyStateArgs)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, FindManyStateArgs_1.FindManyStateArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], FindManyStateResolver.prototype, "states", null);
exports.FindManyStateResolver = FindManyStateResolver = tslib_1.__decorate([
    TypeGraphQL.Resolver(_of => State_1.State)
], FindManyStateResolver);
