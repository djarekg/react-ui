"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FindManyCustomerContactResolver = void 0;
const tslib_1 = require("tslib");
const TypeGraphQL = tslib_1.__importStar(require("type-graphql"));
const FindManyCustomerContactArgs_1 = require("./args/FindManyCustomerContactArgs");
const CustomerContact_1 = require("../../../models/CustomerContact");
const helpers_1 = require("../../../helpers");
let FindManyCustomerContactResolver = class FindManyCustomerContactResolver {
    async customerContacts(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).customerContact.findMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
};
exports.FindManyCustomerContactResolver = FindManyCustomerContactResolver;
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => [CustomerContact_1.CustomerContact], {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args(_type => FindManyCustomerContactArgs_1.FindManyCustomerContactArgs)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, FindManyCustomerContactArgs_1.FindManyCustomerContactArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], FindManyCustomerContactResolver.prototype, "customerContacts", null);
exports.FindManyCustomerContactResolver = FindManyCustomerContactResolver = tslib_1.__decorate([
    TypeGraphQL.Resolver(_of => CustomerContact_1.CustomerContact)
], FindManyCustomerContactResolver);
