"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StateCrudResolver = void 0;
const tslib_1 = require("tslib");
const TypeGraphQL = tslib_1.__importStar(require("type-graphql"));
const AggregateStateArgs_1 = require("./args/AggregateStateArgs");
const CreateManyAndReturnStateArgs_1 = require("./args/CreateManyAndReturnStateArgs");
const CreateManyStateArgs_1 = require("./args/CreateManyStateArgs");
const CreateOneStateArgs_1 = require("./args/CreateOneStateArgs");
const DeleteManyStateArgs_1 = require("./args/DeleteManyStateArgs");
const DeleteOneStateArgs_1 = require("./args/DeleteOneStateArgs");
const FindFirstStateArgs_1 = require("./args/FindFirstStateArgs");
const FindFirstStateOrThrowArgs_1 = require("./args/FindFirstStateOrThrowArgs");
const FindManyStateArgs_1 = require("./args/FindManyStateArgs");
const FindUniqueStateArgs_1 = require("./args/FindUniqueStateArgs");
const FindUniqueStateOrThrowArgs_1 = require("./args/FindUniqueStateOrThrowArgs");
const GroupByStateArgs_1 = require("./args/GroupByStateArgs");
const UpdateManyStateArgs_1 = require("./args/UpdateManyStateArgs");
const UpdateOneStateArgs_1 = require("./args/UpdateOneStateArgs");
const UpsertOneStateArgs_1 = require("./args/UpsertOneStateArgs");
const helpers_1 = require("../../../helpers");
const State_1 = require("../../../models/State");
const AffectedRowsOutput_1 = require("../../outputs/AffectedRowsOutput");
const AggregateState_1 = require("../../outputs/AggregateState");
const CreateManyAndReturnState_1 = require("../../outputs/CreateManyAndReturnState");
const StateGroupBy_1 = require("../../outputs/StateGroupBy");
let StateCrudResolver = class StateCrudResolver {
    async aggregateState(ctx, info, args) {
        return (0, helpers_1.getPrismaFromContext)(ctx).state.aggregate({
            ...args,
            ...(0, helpers_1.transformInfoIntoPrismaArgs)(info),
        });
    }
    async createManyState(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).state.createMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async createManyAndReturnState(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).state.createManyAndReturn({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async createOneState(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).state.create({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async deleteManyState(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).state.deleteMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async deleteOneState(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).state.delete({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async findFirstState(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).state.findFirst({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async findFirstStateOrThrow(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).state.findFirstOrThrow({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async states(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).state.findMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async state(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).state.findUnique({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async getState(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).state.findUniqueOrThrow({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async groupByState(ctx, info, args) {
        const { _count, _avg, _sum, _min, _max } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).state.groupBy({
            ...args,
            ...Object.fromEntries(Object.entries({ _count, _avg, _sum, _min, _max }).filter(([_, v]) => v != null)),
        });
    }
    async updateManyState(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).state.updateMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async updateOneState(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).state.update({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async upsertOneState(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).state.upsert({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
};
exports.StateCrudResolver = StateCrudResolver;
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => AggregateState_1.AggregateState, {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args(_type => AggregateStateArgs_1.AggregateStateArgs)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, AggregateStateArgs_1.AggregateStateArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], StateCrudResolver.prototype, "aggregateState", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args(_type => CreateManyStateArgs_1.CreateManyStateArgs)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, CreateManyStateArgs_1.CreateManyStateArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], StateCrudResolver.prototype, "createManyState", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => [CreateManyAndReturnState_1.CreateManyAndReturnState], {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args(_type => CreateManyAndReturnStateArgs_1.CreateManyAndReturnStateArgs)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, CreateManyAndReturnStateArgs_1.CreateManyAndReturnStateArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], StateCrudResolver.prototype, "createManyAndReturnState", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => State_1.State, {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args(_type => CreateOneStateArgs_1.CreateOneStateArgs)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, CreateOneStateArgs_1.CreateOneStateArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], StateCrudResolver.prototype, "createOneState", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args(_type => DeleteManyStateArgs_1.DeleteManyStateArgs)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, DeleteManyStateArgs_1.DeleteManyStateArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], StateCrudResolver.prototype, "deleteManyState", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => State_1.State, {
        nullable: true
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args(_type => DeleteOneStateArgs_1.DeleteOneStateArgs)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, DeleteOneStateArgs_1.DeleteOneStateArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], StateCrudResolver.prototype, "deleteOneState", null);
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => State_1.State, {
        nullable: true
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args(_type => FindFirstStateArgs_1.FindFirstStateArgs)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, FindFirstStateArgs_1.FindFirstStateArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], StateCrudResolver.prototype, "findFirstState", null);
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => State_1.State, {
        nullable: true
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args(_type => FindFirstStateOrThrowArgs_1.FindFirstStateOrThrowArgs)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, FindFirstStateOrThrowArgs_1.FindFirstStateOrThrowArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], StateCrudResolver.prototype, "findFirstStateOrThrow", null);
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => [State_1.State], {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args(_type => FindManyStateArgs_1.FindManyStateArgs)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, FindManyStateArgs_1.FindManyStateArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], StateCrudResolver.prototype, "states", null);
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => State_1.State, {
        nullable: true
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args(_type => FindUniqueStateArgs_1.FindUniqueStateArgs)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, FindUniqueStateArgs_1.FindUniqueStateArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], StateCrudResolver.prototype, "state", null);
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => State_1.State, {
        nullable: true
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args(_type => FindUniqueStateOrThrowArgs_1.FindUniqueStateOrThrowArgs)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, FindUniqueStateOrThrowArgs_1.FindUniqueStateOrThrowArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], StateCrudResolver.prototype, "getState", null);
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => [StateGroupBy_1.StateGroupBy], {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args(_type => GroupByStateArgs_1.GroupByStateArgs)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, GroupByStateArgs_1.GroupByStateArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], StateCrudResolver.prototype, "groupByState", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args(_type => UpdateManyStateArgs_1.UpdateManyStateArgs)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, UpdateManyStateArgs_1.UpdateManyStateArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], StateCrudResolver.prototype, "updateManyState", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => State_1.State, {
        nullable: true
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args(_type => UpdateOneStateArgs_1.UpdateOneStateArgs)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, UpdateOneStateArgs_1.UpdateOneStateArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], StateCrudResolver.prototype, "updateOneState", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => State_1.State, {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args(_type => UpsertOneStateArgs_1.UpsertOneStateArgs)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, UpsertOneStateArgs_1.UpsertOneStateArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], StateCrudResolver.prototype, "upsertOneState", null);
exports.StateCrudResolver = StateCrudResolver = tslib_1.__decorate([
    TypeGraphQL.Resolver(_of => State_1.State)
], StateCrudResolver);
