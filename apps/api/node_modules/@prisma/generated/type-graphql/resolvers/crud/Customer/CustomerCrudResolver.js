"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomerCrudResolver = void 0;
const tslib_1 = require("tslib");
const TypeGraphQL = tslib_1.__importStar(require("type-graphql"));
const AggregateCustomerArgs_1 = require("./args/AggregateCustomerArgs");
const CreateManyAndReturnCustomerArgs_1 = require("./args/CreateManyAndReturnCustomerArgs");
const CreateManyCustomerArgs_1 = require("./args/CreateManyCustomerArgs");
const CreateOneCustomerArgs_1 = require("./args/CreateOneCustomerArgs");
const DeleteManyCustomerArgs_1 = require("./args/DeleteManyCustomerArgs");
const DeleteOneCustomerArgs_1 = require("./args/DeleteOneCustomerArgs");
const FindFirstCustomerArgs_1 = require("./args/FindFirstCustomerArgs");
const FindFirstCustomerOrThrowArgs_1 = require("./args/FindFirstCustomerOrThrowArgs");
const FindManyCustomerArgs_1 = require("./args/FindManyCustomerArgs");
const FindUniqueCustomerArgs_1 = require("./args/FindUniqueCustomerArgs");
const FindUniqueCustomerOrThrowArgs_1 = require("./args/FindUniqueCustomerOrThrowArgs");
const GroupByCustomerArgs_1 = require("./args/GroupByCustomerArgs");
const UpdateManyCustomerArgs_1 = require("./args/UpdateManyCustomerArgs");
const UpdateOneCustomerArgs_1 = require("./args/UpdateOneCustomerArgs");
const UpsertOneCustomerArgs_1 = require("./args/UpsertOneCustomerArgs");
const helpers_1 = require("../../../helpers");
const Customer_1 = require("../../../models/Customer");
const AffectedRowsOutput_1 = require("../../outputs/AffectedRowsOutput");
const AggregateCustomer_1 = require("../../outputs/AggregateCustomer");
const CreateManyAndReturnCustomer_1 = require("../../outputs/CreateManyAndReturnCustomer");
const CustomerGroupBy_1 = require("../../outputs/CustomerGroupBy");
let CustomerCrudResolver = class CustomerCrudResolver {
    async aggregateCustomer(ctx, info, args) {
        return (0, helpers_1.getPrismaFromContext)(ctx).customer.aggregate({
            ...args,
            ...(0, helpers_1.transformInfoIntoPrismaArgs)(info),
        });
    }
    async createManyCustomer(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).customer.createMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async createManyAndReturnCustomer(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).customer.createManyAndReturn({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async createOneCustomer(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).customer.create({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async deleteManyCustomer(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).customer.deleteMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async deleteOneCustomer(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).customer.delete({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async findFirstCustomer(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).customer.findFirst({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async findFirstCustomerOrThrow(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).customer.findFirstOrThrow({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async customers(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).customer.findMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async customer(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).customer.findUnique({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async getCustomer(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).customer.findUniqueOrThrow({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async groupByCustomer(ctx, info, args) {
        const { _count, _avg, _sum, _min, _max } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).customer.groupBy({
            ...args,
            ...Object.fromEntries(Object.entries({ _count, _avg, _sum, _min, _max }).filter(([_, v]) => v != null)),
        });
    }
    async updateManyCustomer(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).customer.updateMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async updateOneCustomer(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).customer.update({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async upsertOneCustomer(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).customer.upsert({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
};
exports.CustomerCrudResolver = CustomerCrudResolver;
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => AggregateCustomer_1.AggregateCustomer, {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args(_type => AggregateCustomerArgs_1.AggregateCustomerArgs)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, AggregateCustomerArgs_1.AggregateCustomerArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], CustomerCrudResolver.prototype, "aggregateCustomer", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args(_type => CreateManyCustomerArgs_1.CreateManyCustomerArgs)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, CreateManyCustomerArgs_1.CreateManyCustomerArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], CustomerCrudResolver.prototype, "createManyCustomer", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => [CreateManyAndReturnCustomer_1.CreateManyAndReturnCustomer], {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args(_type => CreateManyAndReturnCustomerArgs_1.CreateManyAndReturnCustomerArgs)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, CreateManyAndReturnCustomerArgs_1.CreateManyAndReturnCustomerArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], CustomerCrudResolver.prototype, "createManyAndReturnCustomer", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => Customer_1.Customer, {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args(_type => CreateOneCustomerArgs_1.CreateOneCustomerArgs)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, CreateOneCustomerArgs_1.CreateOneCustomerArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], CustomerCrudResolver.prototype, "createOneCustomer", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args(_type => DeleteManyCustomerArgs_1.DeleteManyCustomerArgs)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, DeleteManyCustomerArgs_1.DeleteManyCustomerArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], CustomerCrudResolver.prototype, "deleteManyCustomer", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => Customer_1.Customer, {
        nullable: true
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args(_type => DeleteOneCustomerArgs_1.DeleteOneCustomerArgs)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, DeleteOneCustomerArgs_1.DeleteOneCustomerArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], CustomerCrudResolver.prototype, "deleteOneCustomer", null);
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => Customer_1.Customer, {
        nullable: true
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args(_type => FindFirstCustomerArgs_1.FindFirstCustomerArgs)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, FindFirstCustomerArgs_1.FindFirstCustomerArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], CustomerCrudResolver.prototype, "findFirstCustomer", null);
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => Customer_1.Customer, {
        nullable: true
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args(_type => FindFirstCustomerOrThrowArgs_1.FindFirstCustomerOrThrowArgs)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, FindFirstCustomerOrThrowArgs_1.FindFirstCustomerOrThrowArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], CustomerCrudResolver.prototype, "findFirstCustomerOrThrow", null);
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => [Customer_1.Customer], {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args(_type => FindManyCustomerArgs_1.FindManyCustomerArgs)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, FindManyCustomerArgs_1.FindManyCustomerArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], CustomerCrudResolver.prototype, "customers", null);
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => Customer_1.Customer, {
        nullable: true
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args(_type => FindUniqueCustomerArgs_1.FindUniqueCustomerArgs)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, FindUniqueCustomerArgs_1.FindUniqueCustomerArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], CustomerCrudResolver.prototype, "customer", null);
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => Customer_1.Customer, {
        nullable: true
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args(_type => FindUniqueCustomerOrThrowArgs_1.FindUniqueCustomerOrThrowArgs)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, FindUniqueCustomerOrThrowArgs_1.FindUniqueCustomerOrThrowArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], CustomerCrudResolver.prototype, "getCustomer", null);
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => [CustomerGroupBy_1.CustomerGroupBy], {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args(_type => GroupByCustomerArgs_1.GroupByCustomerArgs)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, GroupByCustomerArgs_1.GroupByCustomerArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], CustomerCrudResolver.prototype, "groupByCustomer", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args(_type => UpdateManyCustomerArgs_1.UpdateManyCustomerArgs)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, UpdateManyCustomerArgs_1.UpdateManyCustomerArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], CustomerCrudResolver.prototype, "updateManyCustomer", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => Customer_1.Customer, {
        nullable: true
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args(_type => UpdateOneCustomerArgs_1.UpdateOneCustomerArgs)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, UpdateOneCustomerArgs_1.UpdateOneCustomerArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], CustomerCrudResolver.prototype, "updateOneCustomer", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => Customer_1.Customer, {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args(_type => UpsertOneCustomerArgs_1.UpsertOneCustomerArgs)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, UpsertOneCustomerArgs_1.UpsertOneCustomerArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], CustomerCrudResolver.prototype, "upsertOneCustomer", null);
exports.CustomerCrudResolver = CustomerCrudResolver = tslib_1.__decorate([
    TypeGraphQL.Resolver(_of => Customer_1.Customer)
], CustomerCrudResolver);
