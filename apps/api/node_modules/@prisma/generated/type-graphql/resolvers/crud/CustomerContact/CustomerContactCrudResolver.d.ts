import type { GraphQLResolveInfo } from "graphql";
import { AggregateCustomerContactArgs } from "./args/AggregateCustomerContactArgs";
import { CreateManyAndReturnCustomerContactArgs } from "./args/CreateManyAndReturnCustomerContactArgs";
import { CreateManyCustomerContactArgs } from "./args/CreateManyCustomerContactArgs";
import { CreateOneCustomerContactArgs } from "./args/CreateOneCustomerContactArgs";
import { DeleteManyCustomerContactArgs } from "./args/DeleteManyCustomerContactArgs";
import { DeleteOneCustomerContactArgs } from "./args/DeleteOneCustomerContactArgs";
import { FindFirstCustomerContactArgs } from "./args/FindFirstCustomerContactArgs";
import { FindFirstCustomerContactOrThrowArgs } from "./args/FindFirstCustomerContactOrThrowArgs";
import { FindManyCustomerContactArgs } from "./args/FindManyCustomerContactArgs";
import { FindUniqueCustomerContactArgs } from "./args/FindUniqueCustomerContactArgs";
import { FindUniqueCustomerContactOrThrowArgs } from "./args/FindUniqueCustomerContactOrThrowArgs";
import { GroupByCustomerContactArgs } from "./args/GroupByCustomerContactArgs";
import { UpdateManyCustomerContactArgs } from "./args/UpdateManyCustomerContactArgs";
import { UpdateOneCustomerContactArgs } from "./args/UpdateOneCustomerContactArgs";
import { UpsertOneCustomerContactArgs } from "./args/UpsertOneCustomerContactArgs";
import { CustomerContact } from "../../../models/CustomerContact";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateCustomerContact } from "../../outputs/AggregateCustomerContact";
import { CreateManyAndReturnCustomerContact } from "../../outputs/CreateManyAndReturnCustomerContact";
import { CustomerContactGroupBy } from "../../outputs/CustomerContactGroupBy";
export declare class CustomerContactCrudResolver {
    aggregateCustomerContact(ctx: any, info: GraphQLResolveInfo, args: AggregateCustomerContactArgs): Promise<AggregateCustomerContact>;
    createManyCustomerContact(ctx: any, info: GraphQLResolveInfo, args: CreateManyCustomerContactArgs): Promise<AffectedRowsOutput>;
    createManyAndReturnCustomerContact(ctx: any, info: GraphQLResolveInfo, args: CreateManyAndReturnCustomerContactArgs): Promise<CreateManyAndReturnCustomerContact[]>;
    createOneCustomerContact(ctx: any, info: GraphQLResolveInfo, args: CreateOneCustomerContactArgs): Promise<CustomerContact>;
    deleteManyCustomerContact(ctx: any, info: GraphQLResolveInfo, args: DeleteManyCustomerContactArgs): Promise<AffectedRowsOutput>;
    deleteOneCustomerContact(ctx: any, info: GraphQLResolveInfo, args: DeleteOneCustomerContactArgs): Promise<CustomerContact | null>;
    findFirstCustomerContact(ctx: any, info: GraphQLResolveInfo, args: FindFirstCustomerContactArgs): Promise<CustomerContact | null>;
    findFirstCustomerContactOrThrow(ctx: any, info: GraphQLResolveInfo, args: FindFirstCustomerContactOrThrowArgs): Promise<CustomerContact | null>;
    customerContacts(ctx: any, info: GraphQLResolveInfo, args: FindManyCustomerContactArgs): Promise<CustomerContact[]>;
    customerContact(ctx: any, info: GraphQLResolveInfo, args: FindUniqueCustomerContactArgs): Promise<CustomerContact | null>;
    getCustomerContact(ctx: any, info: GraphQLResolveInfo, args: FindUniqueCustomerContactOrThrowArgs): Promise<CustomerContact | null>;
    groupByCustomerContact(ctx: any, info: GraphQLResolveInfo, args: GroupByCustomerContactArgs): Promise<CustomerContactGroupBy[]>;
    updateManyCustomerContact(ctx: any, info: GraphQLResolveInfo, args: UpdateManyCustomerContactArgs): Promise<AffectedRowsOutput>;
    updateOneCustomerContact(ctx: any, info: GraphQLResolveInfo, args: UpdateOneCustomerContactArgs): Promise<CustomerContact | null>;
    upsertOneCustomerContact(ctx: any, info: GraphQLResolveInfo, args: UpsertOneCustomerContactArgs): Promise<CustomerContact>;
}
