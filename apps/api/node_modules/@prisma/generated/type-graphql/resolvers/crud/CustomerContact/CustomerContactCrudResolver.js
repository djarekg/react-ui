"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomerContactCrudResolver = void 0;
const tslib_1 = require("tslib");
const TypeGraphQL = tslib_1.__importStar(require("type-graphql"));
const AggregateCustomerContactArgs_1 = require("./args/AggregateCustomerContactArgs");
const CreateManyAndReturnCustomerContactArgs_1 = require("./args/CreateManyAndReturnCustomerContactArgs");
const CreateManyCustomerContactArgs_1 = require("./args/CreateManyCustomerContactArgs");
const CreateOneCustomerContactArgs_1 = require("./args/CreateOneCustomerContactArgs");
const DeleteManyCustomerContactArgs_1 = require("./args/DeleteManyCustomerContactArgs");
const DeleteOneCustomerContactArgs_1 = require("./args/DeleteOneCustomerContactArgs");
const FindFirstCustomerContactArgs_1 = require("./args/FindFirstCustomerContactArgs");
const FindFirstCustomerContactOrThrowArgs_1 = require("./args/FindFirstCustomerContactOrThrowArgs");
const FindManyCustomerContactArgs_1 = require("./args/FindManyCustomerContactArgs");
const FindUniqueCustomerContactArgs_1 = require("./args/FindUniqueCustomerContactArgs");
const FindUniqueCustomerContactOrThrowArgs_1 = require("./args/FindUniqueCustomerContactOrThrowArgs");
const GroupByCustomerContactArgs_1 = require("./args/GroupByCustomerContactArgs");
const UpdateManyCustomerContactArgs_1 = require("./args/UpdateManyCustomerContactArgs");
const UpdateOneCustomerContactArgs_1 = require("./args/UpdateOneCustomerContactArgs");
const UpsertOneCustomerContactArgs_1 = require("./args/UpsertOneCustomerContactArgs");
const helpers_1 = require("../../../helpers");
const CustomerContact_1 = require("../../../models/CustomerContact");
const AffectedRowsOutput_1 = require("../../outputs/AffectedRowsOutput");
const AggregateCustomerContact_1 = require("../../outputs/AggregateCustomerContact");
const CreateManyAndReturnCustomerContact_1 = require("../../outputs/CreateManyAndReturnCustomerContact");
const CustomerContactGroupBy_1 = require("../../outputs/CustomerContactGroupBy");
let CustomerContactCrudResolver = class CustomerContactCrudResolver {
    async aggregateCustomerContact(ctx, info, args) {
        return (0, helpers_1.getPrismaFromContext)(ctx).customerContact.aggregate({
            ...args,
            ...(0, helpers_1.transformInfoIntoPrismaArgs)(info),
        });
    }
    async createManyCustomerContact(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).customerContact.createMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async createManyAndReturnCustomerContact(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).customerContact.createManyAndReturn({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async createOneCustomerContact(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).customerContact.create({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async deleteManyCustomerContact(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).customerContact.deleteMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async deleteOneCustomerContact(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).customerContact.delete({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async findFirstCustomerContact(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).customerContact.findFirst({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async findFirstCustomerContactOrThrow(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).customerContact.findFirstOrThrow({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async customerContacts(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).customerContact.findMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async customerContact(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).customerContact.findUnique({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async getCustomerContact(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).customerContact.findUniqueOrThrow({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async groupByCustomerContact(ctx, info, args) {
        const { _count, _avg, _sum, _min, _max } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).customerContact.groupBy({
            ...args,
            ...Object.fromEntries(Object.entries({ _count, _avg, _sum, _min, _max }).filter(([_, v]) => v != null)),
        });
    }
    async updateManyCustomerContact(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).customerContact.updateMany({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async updateOneCustomerContact(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).customerContact.update({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async upsertOneCustomerContact(ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).customerContact.upsert({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
};
exports.CustomerContactCrudResolver = CustomerContactCrudResolver;
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => AggregateCustomerContact_1.AggregateCustomerContact, {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args(_type => AggregateCustomerContactArgs_1.AggregateCustomerContactArgs)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, AggregateCustomerContactArgs_1.AggregateCustomerContactArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], CustomerContactCrudResolver.prototype, "aggregateCustomerContact", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args(_type => CreateManyCustomerContactArgs_1.CreateManyCustomerContactArgs)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, CreateManyCustomerContactArgs_1.CreateManyCustomerContactArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], CustomerContactCrudResolver.prototype, "createManyCustomerContact", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => [CreateManyAndReturnCustomerContact_1.CreateManyAndReturnCustomerContact], {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args(_type => CreateManyAndReturnCustomerContactArgs_1.CreateManyAndReturnCustomerContactArgs)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, CreateManyAndReturnCustomerContactArgs_1.CreateManyAndReturnCustomerContactArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], CustomerContactCrudResolver.prototype, "createManyAndReturnCustomerContact", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => CustomerContact_1.CustomerContact, {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args(_type => CreateOneCustomerContactArgs_1.CreateOneCustomerContactArgs)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, CreateOneCustomerContactArgs_1.CreateOneCustomerContactArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], CustomerContactCrudResolver.prototype, "createOneCustomerContact", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args(_type => DeleteManyCustomerContactArgs_1.DeleteManyCustomerContactArgs)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, DeleteManyCustomerContactArgs_1.DeleteManyCustomerContactArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], CustomerContactCrudResolver.prototype, "deleteManyCustomerContact", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => CustomerContact_1.CustomerContact, {
        nullable: true
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args(_type => DeleteOneCustomerContactArgs_1.DeleteOneCustomerContactArgs)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, DeleteOneCustomerContactArgs_1.DeleteOneCustomerContactArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], CustomerContactCrudResolver.prototype, "deleteOneCustomerContact", null);
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => CustomerContact_1.CustomerContact, {
        nullable: true
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args(_type => FindFirstCustomerContactArgs_1.FindFirstCustomerContactArgs)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, FindFirstCustomerContactArgs_1.FindFirstCustomerContactArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], CustomerContactCrudResolver.prototype, "findFirstCustomerContact", null);
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => CustomerContact_1.CustomerContact, {
        nullable: true
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args(_type => FindFirstCustomerContactOrThrowArgs_1.FindFirstCustomerContactOrThrowArgs)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, FindFirstCustomerContactOrThrowArgs_1.FindFirstCustomerContactOrThrowArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], CustomerContactCrudResolver.prototype, "findFirstCustomerContactOrThrow", null);
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => [CustomerContact_1.CustomerContact], {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args(_type => FindManyCustomerContactArgs_1.FindManyCustomerContactArgs)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, FindManyCustomerContactArgs_1.FindManyCustomerContactArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], CustomerContactCrudResolver.prototype, "customerContacts", null);
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => CustomerContact_1.CustomerContact, {
        nullable: true
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args(_type => FindUniqueCustomerContactArgs_1.FindUniqueCustomerContactArgs)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, FindUniqueCustomerContactArgs_1.FindUniqueCustomerContactArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], CustomerContactCrudResolver.prototype, "customerContact", null);
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => CustomerContact_1.CustomerContact, {
        nullable: true
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args(_type => FindUniqueCustomerContactOrThrowArgs_1.FindUniqueCustomerContactOrThrowArgs)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, FindUniqueCustomerContactOrThrowArgs_1.FindUniqueCustomerContactOrThrowArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], CustomerContactCrudResolver.prototype, "getCustomerContact", null);
tslib_1.__decorate([
    TypeGraphQL.Query(_returns => [CustomerContactGroupBy_1.CustomerContactGroupBy], {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args(_type => GroupByCustomerContactArgs_1.GroupByCustomerContactArgs)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, GroupByCustomerContactArgs_1.GroupByCustomerContactArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], CustomerContactCrudResolver.prototype, "groupByCustomerContact", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => AffectedRowsOutput_1.AffectedRowsOutput, {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args(_type => UpdateManyCustomerContactArgs_1.UpdateManyCustomerContactArgs)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, UpdateManyCustomerContactArgs_1.UpdateManyCustomerContactArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], CustomerContactCrudResolver.prototype, "updateManyCustomerContact", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => CustomerContact_1.CustomerContact, {
        nullable: true
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args(_type => UpdateOneCustomerContactArgs_1.UpdateOneCustomerContactArgs)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, UpdateOneCustomerContactArgs_1.UpdateOneCustomerContactArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], CustomerContactCrudResolver.prototype, "updateOneCustomerContact", null);
tslib_1.__decorate([
    TypeGraphQL.Mutation(_returns => CustomerContact_1.CustomerContact, {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Ctx()),
    tslib_1.__param(1, TypeGraphQL.Info()),
    tslib_1.__param(2, TypeGraphQL.Args(_type => UpsertOneCustomerContactArgs_1.UpsertOneCustomerContactArgs)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [Object, Object, UpsertOneCustomerContactArgs_1.UpsertOneCustomerContactArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], CustomerContactCrudResolver.prototype, "upsertOneCustomerContact", null);
exports.CustomerContactCrudResolver = CustomerContactCrudResolver = tslib_1.__decorate([
    TypeGraphQL.Resolver(_of => CustomerContact_1.CustomerContact)
], CustomerContactCrudResolver);
