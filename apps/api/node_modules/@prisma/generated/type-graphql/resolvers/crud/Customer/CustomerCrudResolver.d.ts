import type { GraphQLResolveInfo } from "graphql";
import { AggregateCustomerArgs } from "./args/AggregateCustomerArgs";
import { CreateManyAndReturnCustomerArgs } from "./args/CreateManyAndReturnCustomerArgs";
import { CreateManyCustomerArgs } from "./args/CreateManyCustomerArgs";
import { CreateOneCustomerArgs } from "./args/CreateOneCustomerArgs";
import { DeleteManyCustomerArgs } from "./args/DeleteManyCustomerArgs";
import { DeleteOneCustomerArgs } from "./args/DeleteOneCustomerArgs";
import { FindFirstCustomerArgs } from "./args/FindFirstCustomerArgs";
import { FindFirstCustomerOrThrowArgs } from "./args/FindFirstCustomerOrThrowArgs";
import { FindManyCustomerArgs } from "./args/FindManyCustomerArgs";
import { FindUniqueCustomerArgs } from "./args/FindUniqueCustomerArgs";
import { FindUniqueCustomerOrThrowArgs } from "./args/FindUniqueCustomerOrThrowArgs";
import { GroupByCustomerArgs } from "./args/GroupByCustomerArgs";
import { UpdateManyCustomerArgs } from "./args/UpdateManyCustomerArgs";
import { UpdateOneCustomerArgs } from "./args/UpdateOneCustomerArgs";
import { UpsertOneCustomerArgs } from "./args/UpsertOneCustomerArgs";
import { Customer } from "../../../models/Customer";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateCustomer } from "../../outputs/AggregateCustomer";
import { CreateManyAndReturnCustomer } from "../../outputs/CreateManyAndReturnCustomer";
import { CustomerGroupBy } from "../../outputs/CustomerGroupBy";
export declare class CustomerCrudResolver {
    aggregateCustomer(ctx: any, info: GraphQLResolveInfo, args: AggregateCustomerArgs): Promise<AggregateCustomer>;
    createManyCustomer(ctx: any, info: GraphQLResolveInfo, args: CreateManyCustomerArgs): Promise<AffectedRowsOutput>;
    createManyAndReturnCustomer(ctx: any, info: GraphQLResolveInfo, args: CreateManyAndReturnCustomerArgs): Promise<CreateManyAndReturnCustomer[]>;
    createOneCustomer(ctx: any, info: GraphQLResolveInfo, args: CreateOneCustomerArgs): Promise<Customer>;
    deleteManyCustomer(ctx: any, info: GraphQLResolveInfo, args: DeleteManyCustomerArgs): Promise<AffectedRowsOutput>;
    deleteOneCustomer(ctx: any, info: GraphQLResolveInfo, args: DeleteOneCustomerArgs): Promise<Customer | null>;
    findFirstCustomer(ctx: any, info: GraphQLResolveInfo, args: FindFirstCustomerArgs): Promise<Customer | null>;
    findFirstCustomerOrThrow(ctx: any, info: GraphQLResolveInfo, args: FindFirstCustomerOrThrowArgs): Promise<Customer | null>;
    customers(ctx: any, info: GraphQLResolveInfo, args: FindManyCustomerArgs): Promise<Customer[]>;
    customer(ctx: any, info: GraphQLResolveInfo, args: FindUniqueCustomerArgs): Promise<Customer | null>;
    getCustomer(ctx: any, info: GraphQLResolveInfo, args: FindUniqueCustomerOrThrowArgs): Promise<Customer | null>;
    groupByCustomer(ctx: any, info: GraphQLResolveInfo, args: GroupByCustomerArgs): Promise<CustomerGroupBy[]>;
    updateManyCustomer(ctx: any, info: GraphQLResolveInfo, args: UpdateManyCustomerArgs): Promise<AffectedRowsOutput>;
    updateOneCustomer(ctx: any, info: GraphQLResolveInfo, args: UpdateOneCustomerArgs): Promise<Customer | null>;
    upsertOneCustomer(ctx: any, info: GraphQLResolveInfo, args: UpsertOneCustomerArgs): Promise<Customer>;
}
