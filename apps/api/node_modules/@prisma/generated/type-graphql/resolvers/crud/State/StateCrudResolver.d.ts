import type { GraphQLResolveInfo } from "graphql";
import { AggregateStateArgs } from "./args/AggregateStateArgs";
import { CreateManyAndReturnStateArgs } from "./args/CreateManyAndReturnStateArgs";
import { CreateManyStateArgs } from "./args/CreateManyStateArgs";
import { CreateOneStateArgs } from "./args/CreateOneStateArgs";
import { DeleteManyStateArgs } from "./args/DeleteManyStateArgs";
import { DeleteOneStateArgs } from "./args/DeleteOneStateArgs";
import { FindFirstStateArgs } from "./args/FindFirstStateArgs";
import { FindFirstStateOrThrowArgs } from "./args/FindFirstStateOrThrowArgs";
import { FindManyStateArgs } from "./args/FindManyStateArgs";
import { FindUniqueStateArgs } from "./args/FindUniqueStateArgs";
import { FindUniqueStateOrThrowArgs } from "./args/FindUniqueStateOrThrowArgs";
import { GroupByStateArgs } from "./args/GroupByStateArgs";
import { UpdateManyStateArgs } from "./args/UpdateManyStateArgs";
import { UpdateOneStateArgs } from "./args/UpdateOneStateArgs";
import { UpsertOneStateArgs } from "./args/UpsertOneStateArgs";
import { State } from "../../../models/State";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateState } from "../../outputs/AggregateState";
import { CreateManyAndReturnState } from "../../outputs/CreateManyAndReturnState";
import { StateGroupBy } from "../../outputs/StateGroupBy";
export declare class StateCrudResolver {
    aggregateState(ctx: any, info: GraphQLResolveInfo, args: AggregateStateArgs): Promise<AggregateState>;
    createManyState(ctx: any, info: GraphQLResolveInfo, args: CreateManyStateArgs): Promise<AffectedRowsOutput>;
    createManyAndReturnState(ctx: any, info: GraphQLResolveInfo, args: CreateManyAndReturnStateArgs): Promise<CreateManyAndReturnState[]>;
    createOneState(ctx: any, info: GraphQLResolveInfo, args: CreateOneStateArgs): Promise<State>;
    deleteManyState(ctx: any, info: GraphQLResolveInfo, args: DeleteManyStateArgs): Promise<AffectedRowsOutput>;
    deleteOneState(ctx: any, info: GraphQLResolveInfo, args: DeleteOneStateArgs): Promise<State | null>;
    findFirstState(ctx: any, info: GraphQLResolveInfo, args: FindFirstStateArgs): Promise<State | null>;
    findFirstStateOrThrow(ctx: any, info: GraphQLResolveInfo, args: FindFirstStateOrThrowArgs): Promise<State | null>;
    states(ctx: any, info: GraphQLResolveInfo, args: FindManyStateArgs): Promise<State[]>;
    state(ctx: any, info: GraphQLResolveInfo, args: FindUniqueStateArgs): Promise<State | null>;
    getState(ctx: any, info: GraphQLResolveInfo, args: FindUniqueStateOrThrowArgs): Promise<State | null>;
    groupByState(ctx: any, info: GraphQLResolveInfo, args: GroupByStateArgs): Promise<StateGroupBy[]>;
    updateManyState(ctx: any, info: GraphQLResolveInfo, args: UpdateManyStateArgs): Promise<AffectedRowsOutput>;
    updateOneState(ctx: any, info: GraphQLResolveInfo, args: UpdateOneStateArgs): Promise<State | null>;
    upsertOneState(ctx: any, info: GraphQLResolveInfo, args: UpsertOneStateArgs): Promise<State>;
}
