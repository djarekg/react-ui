"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.StateRelationsResolver = void 0;
const tslib_1 = require("tslib");
const TypeGraphQL = tslib_1.__importStar(require("type-graphql"));
const Customer_1 = require("../../../models/Customer");
const CustomerContact_1 = require("../../../models/CustomerContact");
const State_1 = require("../../../models/State");
const User_1 = require("../../../models/User");
const StateCustomerArgs_1 = require("./args/StateCustomerArgs");
const StateCustomerContactArgs_1 = require("./args/StateCustomerContactArgs");
const StateUserArgs_1 = require("./args/StateUserArgs");
const helpers_1 = require("../../../helpers");
let StateRelationsResolver = class StateRelationsResolver {
    async user(state, ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).state.findUniqueOrThrow({
            where: {
                id: state.id,
            },
        }).user({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async customer(state, ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).state.findUniqueOrThrow({
            where: {
                id: state.id,
            },
        }).customer({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
    async customerContact(state, ctx, info, args) {
        const { _count } = (0, helpers_1.transformInfoIntoPrismaArgs)(info);
        return (0, helpers_1.getPrismaFromContext)(ctx).state.findUniqueOrThrow({
            where: {
                id: state.id,
            },
        }).customerContact({
            ...args,
            ...(_count && (0, helpers_1.transformCountFieldIntoSelectRelationsCount)(_count)),
        });
    }
};
exports.StateRelationsResolver = StateRelationsResolver;
tslib_1.__decorate([
    TypeGraphQL.FieldResolver(_type => [User_1.User], {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Root()),
    tslib_1.__param(1, TypeGraphQL.Ctx()),
    tslib_1.__param(2, TypeGraphQL.Info()),
    tslib_1.__param(3, TypeGraphQL.Args(_type => StateUserArgs_1.StateUserArgs)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [State_1.State, Object, Object, StateUserArgs_1.StateUserArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], StateRelationsResolver.prototype, "user", null);
tslib_1.__decorate([
    TypeGraphQL.FieldResolver(_type => [Customer_1.Customer], {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Root()),
    tslib_1.__param(1, TypeGraphQL.Ctx()),
    tslib_1.__param(2, TypeGraphQL.Info()),
    tslib_1.__param(3, TypeGraphQL.Args(_type => StateCustomerArgs_1.StateCustomerArgs)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [State_1.State, Object, Object, StateCustomerArgs_1.StateCustomerArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], StateRelationsResolver.prototype, "customer", null);
tslib_1.__decorate([
    TypeGraphQL.FieldResolver(_type => [CustomerContact_1.CustomerContact], {
        nullable: false
    }),
    tslib_1.__param(0, TypeGraphQL.Root()),
    tslib_1.__param(1, TypeGraphQL.Ctx()),
    tslib_1.__param(2, TypeGraphQL.Info()),
    tslib_1.__param(3, TypeGraphQL.Args(_type => StateCustomerContactArgs_1.StateCustomerContactArgs)),
    tslib_1.__metadata("design:type", Function),
    tslib_1.__metadata("design:paramtypes", [State_1.State, Object, Object, StateCustomerContactArgs_1.StateCustomerContactArgs]),
    tslib_1.__metadata("design:returntype", Promise)
], StateRelationsResolver.prototype, "customerContact", null);
exports.StateRelationsResolver = StateRelationsResolver = tslib_1.__decorate([
    TypeGraphQL.Resolver(_of => State_1.State)
], StateRelationsResolver);
