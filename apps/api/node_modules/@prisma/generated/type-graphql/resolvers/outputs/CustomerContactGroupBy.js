"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomerContactGroupBy = void 0;
const tslib_1 = require("tslib");
const TypeGraphQL = tslib_1.__importStar(require("type-graphql"));
const CustomerContactCountAggregate_1 = require("../outputs/CustomerContactCountAggregate");
const CustomerContactMaxAggregate_1 = require("../outputs/CustomerContactMaxAggregate");
const CustomerContactMinAggregate_1 = require("../outputs/CustomerContactMinAggregate");
let CustomerContactGroupBy = class CustomerContactGroupBy {
};
exports.CustomerContactGroupBy = CustomerContactGroupBy;
tslib_1.__decorate([
    TypeGraphQL.Field(_type => String, {
        nullable: false
    }),
    tslib_1.__metadata("design:type", String)
], CustomerContactGroupBy.prototype, "id", void 0);
tslib_1.__decorate([
    TypeGraphQL.Field(_type => String, {
        nullable: false
    }),
    tslib_1.__metadata("design:type", String)
], CustomerContactGroupBy.prototype, "customerId", void 0);
tslib_1.__decorate([
    TypeGraphQL.Field(_type => String, {
        nullable: false
    }),
    tslib_1.__metadata("design:type", String)
], CustomerContactGroupBy.prototype, "firstName", void 0);
tslib_1.__decorate([
    TypeGraphQL.Field(_type => String, {
        nullable: false
    }),
    tslib_1.__metadata("design:type", String)
], CustomerContactGroupBy.prototype, "lastName", void 0);
tslib_1.__decorate([
    TypeGraphQL.Field(_type => String, {
        nullable: false
    }),
    tslib_1.__metadata("design:type", String)
], CustomerContactGroupBy.prototype, "email", void 0);
tslib_1.__decorate([
    TypeGraphQL.Field(_type => String, {
        nullable: false
    }),
    tslib_1.__metadata("design:type", String)
], CustomerContactGroupBy.prototype, "streetAddress", void 0);
tslib_1.__decorate([
    TypeGraphQL.Field(_type => String, {
        nullable: true
    }),
    tslib_1.__metadata("design:type", String)
], CustomerContactGroupBy.prototype, "streetAddress2", void 0);
tslib_1.__decorate([
    TypeGraphQL.Field(_type => String, {
        nullable: false
    }),
    tslib_1.__metadata("design:type", String)
], CustomerContactGroupBy.prototype, "city", void 0);
tslib_1.__decorate([
    TypeGraphQL.Field(_type => String, {
        nullable: false
    }),
    tslib_1.__metadata("design:type", String)
], CustomerContactGroupBy.prototype, "stateId", void 0);
tslib_1.__decorate([
    TypeGraphQL.Field(_type => String, {
        nullable: false
    }),
    tslib_1.__metadata("design:type", String)
], CustomerContactGroupBy.prototype, "zip", void 0);
tslib_1.__decorate([
    TypeGraphQL.Field(_type => String, {
        nullable: false
    }),
    tslib_1.__metadata("design:type", String)
], CustomerContactGroupBy.prototype, "phone", void 0);
tslib_1.__decorate([
    TypeGraphQL.Field(_type => Date, {
        nullable: false
    }),
    tslib_1.__metadata("design:type", Date)
], CustomerContactGroupBy.prototype, "dateCreated", void 0);
tslib_1.__decorate([
    TypeGraphQL.Field(_type => Date, {
        nullable: false
    }),
    tslib_1.__metadata("design:type", Date)
], CustomerContactGroupBy.prototype, "dateUpdated", void 0);
tslib_1.__decorate([
    TypeGraphQL.Field(_type => CustomerContactCountAggregate_1.CustomerContactCountAggregate, {
        nullable: true
    }),
    tslib_1.__metadata("design:type", CustomerContactCountAggregate_1.CustomerContactCountAggregate)
], CustomerContactGroupBy.prototype, "_count", void 0);
tslib_1.__decorate([
    TypeGraphQL.Field(_type => CustomerContactMinAggregate_1.CustomerContactMinAggregate, {
        nullable: true
    }),
    tslib_1.__metadata("design:type", CustomerContactMinAggregate_1.CustomerContactMinAggregate)
], CustomerContactGroupBy.prototype, "_min", void 0);
tslib_1.__decorate([
    TypeGraphQL.Field(_type => CustomerContactMaxAggregate_1.CustomerContactMaxAggregate, {
        nullable: true
    }),
    tslib_1.__metadata("design:type", CustomerContactMaxAggregate_1.CustomerContactMaxAggregate)
], CustomerContactGroupBy.prototype, "_max", void 0);
exports.CustomerContactGroupBy = CustomerContactGroupBy = tslib_1.__decorate([
    TypeGraphQL.ObjectType("CustomerContactGroupBy", {
        simpleResolvers: true
    })
], CustomerContactGroupBy);
