"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.applyResolversEnhanceMap = applyResolversEnhanceMap;
exports.applyArgsTypesEnhanceMap = applyArgsTypesEnhanceMap;
exports.applyRelationResolversEnhanceMap = applyRelationResolversEnhanceMap;
exports.applyModelsEnhanceMap = applyModelsEnhanceMap;
exports.applyOutputTypesEnhanceMap = applyOutputTypesEnhanceMap;
exports.applyInputTypesEnhanceMap = applyInputTypesEnhanceMap;
const tslib_1 = require("tslib");
const tslib = tslib_1.__importStar(require("tslib"));
const crudResolvers = tslib_1.__importStar(require("./resolvers/crud/resolvers-crud.index"));
const argsTypes = tslib_1.__importStar(require("./resolvers/crud/args.index"));
const actionResolvers = tslib_1.__importStar(require("./resolvers/crud/resolvers-actions.index"));
const relationResolvers = tslib_1.__importStar(require("./resolvers/relations/resolvers.index"));
const models = tslib_1.__importStar(require("./models"));
const outputTypes = tslib_1.__importStar(require("./resolvers/outputs"));
const inputTypes = tslib_1.__importStar(require("./resolvers/inputs"));
const crudResolversMap = {
    State: crudResolvers.StateCrudResolver,
    User: crudResolvers.UserCrudResolver,
    Customer: crudResolvers.CustomerCrudResolver,
    CustomerContact: crudResolvers.CustomerContactCrudResolver
};
const actionResolversMap = {
    State: {
        aggregateState: actionResolvers.AggregateStateResolver,
        createManyState: actionResolvers.CreateManyStateResolver,
        createManyAndReturnState: actionResolvers.CreateManyAndReturnStateResolver,
        createOneState: actionResolvers.CreateOneStateResolver,
        deleteManyState: actionResolvers.DeleteManyStateResolver,
        deleteOneState: actionResolvers.DeleteOneStateResolver,
        findFirstState: actionResolvers.FindFirstStateResolver,
        findFirstStateOrThrow: actionResolvers.FindFirstStateOrThrowResolver,
        states: actionResolvers.FindManyStateResolver,
        state: actionResolvers.FindUniqueStateResolver,
        getState: actionResolvers.FindUniqueStateOrThrowResolver,
        groupByState: actionResolvers.GroupByStateResolver,
        updateManyState: actionResolvers.UpdateManyStateResolver,
        updateOneState: actionResolvers.UpdateOneStateResolver,
        upsertOneState: actionResolvers.UpsertOneStateResolver
    },
    User: {
        aggregateUser: actionResolvers.AggregateUserResolver,
        createManyUser: actionResolvers.CreateManyUserResolver,
        createManyAndReturnUser: actionResolvers.CreateManyAndReturnUserResolver,
        createOneUser: actionResolvers.CreateOneUserResolver,
        deleteManyUser: actionResolvers.DeleteManyUserResolver,
        deleteOneUser: actionResolvers.DeleteOneUserResolver,
        findFirstUser: actionResolvers.FindFirstUserResolver,
        findFirstUserOrThrow: actionResolvers.FindFirstUserOrThrowResolver,
        users: actionResolvers.FindManyUserResolver,
        user: actionResolvers.FindUniqueUserResolver,
        getUser: actionResolvers.FindUniqueUserOrThrowResolver,
        groupByUser: actionResolvers.GroupByUserResolver,
        updateManyUser: actionResolvers.UpdateManyUserResolver,
        updateOneUser: actionResolvers.UpdateOneUserResolver,
        upsertOneUser: actionResolvers.UpsertOneUserResolver
    },
    Customer: {
        aggregateCustomer: actionResolvers.AggregateCustomerResolver,
        createManyCustomer: actionResolvers.CreateManyCustomerResolver,
        createManyAndReturnCustomer: actionResolvers.CreateManyAndReturnCustomerResolver,
        createOneCustomer: actionResolvers.CreateOneCustomerResolver,
        deleteManyCustomer: actionResolvers.DeleteManyCustomerResolver,
        deleteOneCustomer: actionResolvers.DeleteOneCustomerResolver,
        findFirstCustomer: actionResolvers.FindFirstCustomerResolver,
        findFirstCustomerOrThrow: actionResolvers.FindFirstCustomerOrThrowResolver,
        customers: actionResolvers.FindManyCustomerResolver,
        customer: actionResolvers.FindUniqueCustomerResolver,
        getCustomer: actionResolvers.FindUniqueCustomerOrThrowResolver,
        groupByCustomer: actionResolvers.GroupByCustomerResolver,
        updateManyCustomer: actionResolvers.UpdateManyCustomerResolver,
        updateOneCustomer: actionResolvers.UpdateOneCustomerResolver,
        upsertOneCustomer: actionResolvers.UpsertOneCustomerResolver
    },
    CustomerContact: {
        aggregateCustomerContact: actionResolvers.AggregateCustomerContactResolver,
        createManyCustomerContact: actionResolvers.CreateManyCustomerContactResolver,
        createManyAndReturnCustomerContact: actionResolvers.CreateManyAndReturnCustomerContactResolver,
        createOneCustomerContact: actionResolvers.CreateOneCustomerContactResolver,
        deleteManyCustomerContact: actionResolvers.DeleteManyCustomerContactResolver,
        deleteOneCustomerContact: actionResolvers.DeleteOneCustomerContactResolver,
        findFirstCustomerContact: actionResolvers.FindFirstCustomerContactResolver,
        findFirstCustomerContactOrThrow: actionResolvers.FindFirstCustomerContactOrThrowResolver,
        customerContacts: actionResolvers.FindManyCustomerContactResolver,
        customerContact: actionResolvers.FindUniqueCustomerContactResolver,
        getCustomerContact: actionResolvers.FindUniqueCustomerContactOrThrowResolver,
        groupByCustomerContact: actionResolvers.GroupByCustomerContactResolver,
        updateManyCustomerContact: actionResolvers.UpdateManyCustomerContactResolver,
        updateOneCustomerContact: actionResolvers.UpdateOneCustomerContactResolver,
        upsertOneCustomerContact: actionResolvers.UpsertOneCustomerContactResolver
    }
};
const crudResolversInfo = {
    State: ["aggregateState", "createManyState", "createManyAndReturnState", "createOneState", "deleteManyState", "deleteOneState", "findFirstState", "findFirstStateOrThrow", "states", "state", "getState", "groupByState", "updateManyState", "updateOneState", "upsertOneState"],
    User: ["aggregateUser", "createManyUser", "createManyAndReturnUser", "createOneUser", "deleteManyUser", "deleteOneUser", "findFirstUser", "findFirstUserOrThrow", "users", "user", "getUser", "groupByUser", "updateManyUser", "updateOneUser", "upsertOneUser"],
    Customer: ["aggregateCustomer", "createManyCustomer", "createManyAndReturnCustomer", "createOneCustomer", "deleteManyCustomer", "deleteOneCustomer", "findFirstCustomer", "findFirstCustomerOrThrow", "customers", "customer", "getCustomer", "groupByCustomer", "updateManyCustomer", "updateOneCustomer", "upsertOneCustomer"],
    CustomerContact: ["aggregateCustomerContact", "createManyCustomerContact", "createManyAndReturnCustomerContact", "createOneCustomerContact", "deleteManyCustomerContact", "deleteOneCustomerContact", "findFirstCustomerContact", "findFirstCustomerContactOrThrow", "customerContacts", "customerContact", "getCustomerContact", "groupByCustomerContact", "updateManyCustomerContact", "updateOneCustomerContact", "upsertOneCustomerContact"]
};
const argsInfo = {
    AggregateStateArgs: ["where", "orderBy", "cursor", "take", "skip"],
    CreateManyStateArgs: ["data"],
    CreateManyAndReturnStateArgs: ["data"],
    CreateOneStateArgs: ["data"],
    DeleteManyStateArgs: ["where"],
    DeleteOneStateArgs: ["where"],
    FindFirstStateArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindFirstStateOrThrowArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyStateArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindUniqueStateArgs: ["where"],
    FindUniqueStateOrThrowArgs: ["where"],
    GroupByStateArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    UpdateManyStateArgs: ["data", "where"],
    UpdateOneStateArgs: ["data", "where"],
    UpsertOneStateArgs: ["where", "create", "update"],
    AggregateUserArgs: ["where", "orderBy", "cursor", "take", "skip"],
    CreateManyUserArgs: ["data"],
    CreateManyAndReturnUserArgs: ["data"],
    CreateOneUserArgs: ["data"],
    DeleteManyUserArgs: ["where"],
    DeleteOneUserArgs: ["where"],
    FindFirstUserArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindFirstUserOrThrowArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyUserArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindUniqueUserArgs: ["where"],
    FindUniqueUserOrThrowArgs: ["where"],
    GroupByUserArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    UpdateManyUserArgs: ["data", "where"],
    UpdateOneUserArgs: ["data", "where"],
    UpsertOneUserArgs: ["where", "create", "update"],
    AggregateCustomerArgs: ["where", "orderBy", "cursor", "take", "skip"],
    CreateManyCustomerArgs: ["data"],
    CreateManyAndReturnCustomerArgs: ["data"],
    CreateOneCustomerArgs: ["data"],
    DeleteManyCustomerArgs: ["where"],
    DeleteOneCustomerArgs: ["where"],
    FindFirstCustomerArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindFirstCustomerOrThrowArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyCustomerArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindUniqueCustomerArgs: ["where"],
    FindUniqueCustomerOrThrowArgs: ["where"],
    GroupByCustomerArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    UpdateManyCustomerArgs: ["data", "where"],
    UpdateOneCustomerArgs: ["data", "where"],
    UpsertOneCustomerArgs: ["where", "create", "update"],
    AggregateCustomerContactArgs: ["where", "orderBy", "cursor", "take", "skip"],
    CreateManyCustomerContactArgs: ["data"],
    CreateManyAndReturnCustomerContactArgs: ["data"],
    CreateOneCustomerContactArgs: ["data"],
    DeleteManyCustomerContactArgs: ["where"],
    DeleteOneCustomerContactArgs: ["where"],
    FindFirstCustomerContactArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindFirstCustomerContactOrThrowArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyCustomerContactArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindUniqueCustomerContactArgs: ["where"],
    FindUniqueCustomerContactOrThrowArgs: ["where"],
    GroupByCustomerContactArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    UpdateManyCustomerContactArgs: ["data", "where"],
    UpdateOneCustomerContactArgs: ["data", "where"],
    UpsertOneCustomerContactArgs: ["where", "create", "update"]
};
function applyResolversEnhanceMap(resolversEnhanceMap) {
    const mutationOperationPrefixes = [
        "createOne", "createMany", "createManyAndReturn", "deleteOne", "updateOne", "deleteMany", "updateMany", "upsertOne"
    ];
    for (const resolversEnhanceMapKey of Object.keys(resolversEnhanceMap)) {
        const modelName = resolversEnhanceMapKey;
        const crudTarget = crudResolversMap[modelName].prototype;
        const resolverActionsConfig = resolversEnhanceMap[modelName];
        const actionResolversConfig = actionResolversMap[modelName];
        const allActionsDecorators = resolverActionsConfig._all;
        const resolverActionNames = crudResolversInfo[modelName];
        for (const resolverActionName of resolverActionNames) {
            const maybeDecoratorsOrFn = resolverActionsConfig[resolverActionName];
            const isWriteOperation = mutationOperationPrefixes.some(prefix => resolverActionName.startsWith(prefix));
            const operationKindDecorators = isWriteOperation ? resolverActionsConfig._mutation : resolverActionsConfig._query;
            const mainDecorators = [
                ...allActionsDecorators ?? [],
                ...operationKindDecorators ?? [],
            ];
            let decorators;
            if (typeof maybeDecoratorsOrFn === "function") {
                decorators = maybeDecoratorsOrFn(mainDecorators);
            }
            else {
                decorators = [...mainDecorators, ...maybeDecoratorsOrFn ?? []];
            }
            const actionTarget = actionResolversConfig[resolverActionName].prototype;
            tslib.__decorate(decorators, crudTarget, resolverActionName, null);
            tslib.__decorate(decorators, actionTarget, resolverActionName, null);
        }
    }
}
function applyArgsTypesEnhanceMap(argsTypesEnhanceMap) {
    for (const argsTypesEnhanceMapKey of Object.keys(argsTypesEnhanceMap)) {
        const argsTypeName = argsTypesEnhanceMapKey;
        const typeConfig = argsTypesEnhanceMap[argsTypeName];
        const typeClass = argsTypes[argsTypeName];
        const typeTarget = typeClass.prototype;
        applyTypeClassEnhanceConfig(typeConfig, typeClass, typeTarget, argsInfo[argsTypeName]);
    }
}
const relationResolversMap = {
    State: relationResolvers.StateRelationsResolver,
    User: relationResolvers.UserRelationsResolver,
    Customer: relationResolvers.CustomerRelationsResolver,
    CustomerContact: relationResolvers.CustomerContactRelationsResolver
};
const relationResolversInfo = {
    State: ["user", "customer", "customerContact"],
    User: ["state"],
    Customer: ["CustomerContact", "state"],
    CustomerContact: ["customer", "state"]
};
function applyRelationResolversEnhanceMap(relationResolversEnhanceMap) {
    for (const relationResolversEnhanceMapKey of Object.keys(relationResolversEnhanceMap)) {
        const modelName = relationResolversEnhanceMapKey;
        const relationResolverTarget = relationResolversMap[modelName].prototype;
        const relationResolverActionsConfig = relationResolversEnhanceMap[modelName];
        const allActionsDecorators = relationResolverActionsConfig._all ?? [];
        const relationResolverActionNames = relationResolversInfo[modelName];
        for (const relationResolverActionName of relationResolverActionNames) {
            const maybeDecoratorsOrFn = relationResolverActionsConfig[relationResolverActionName];
            let decorators;
            if (typeof maybeDecoratorsOrFn === "function") {
                decorators = maybeDecoratorsOrFn(allActionsDecorators);
            }
            else {
                decorators = [...allActionsDecorators, ...maybeDecoratorsOrFn ?? []];
            }
            tslib.__decorate(decorators, relationResolverTarget, relationResolverActionName, null);
        }
    }
}
function applyTypeClassEnhanceConfig(enhanceConfig, typeClass, typePrototype, typeFieldNames) {
    if (enhanceConfig.class) {
        tslib.__decorate(enhanceConfig.class, typeClass);
    }
    if (enhanceConfig.fields) {
        const allFieldsDecorators = enhanceConfig.fields._all ?? [];
        for (const typeFieldName of typeFieldNames) {
            const maybeDecoratorsOrFn = enhanceConfig.fields[typeFieldName];
            let decorators;
            if (typeof maybeDecoratorsOrFn === "function") {
                decorators = maybeDecoratorsOrFn(allFieldsDecorators);
            }
            else {
                decorators = [...allFieldsDecorators, ...maybeDecoratorsOrFn ?? []];
            }
            tslib.__decorate(decorators, typePrototype, typeFieldName, void 0);
        }
    }
}
const modelsInfo = {
    State: ["id", "name", "code"],
    User: ["id", "firstName", "lastName", "email", "streetAddress", "streetAddress2", "city", "stateId", "zip", "phone", "password", "role", "dateCreated"],
    Customer: ["id", "name", "streetAddress", "streetAddress2", "city", "stateId", "zip", "phone", "dateCreated", "dateUpdated"],
    CustomerContact: ["id", "customerId", "firstName", "lastName", "email", "streetAddress", "streetAddress2", "city", "stateId", "zip", "phone", "dateCreated", "dateUpdated"]
};
function applyModelsEnhanceMap(modelsEnhanceMap) {
    for (const modelsEnhanceMapKey of Object.keys(modelsEnhanceMap)) {
        const modelName = modelsEnhanceMapKey;
        const modelConfig = modelsEnhanceMap[modelName];
        const modelClass = models[modelName];
        const modelTarget = modelClass.prototype;
        applyTypeClassEnhanceConfig(modelConfig, modelClass, modelTarget, modelsInfo[modelName]);
    }
}
const outputsInfo = {
    AggregateState: ["_count", "_min", "_max"],
    StateGroupBy: ["id", "name", "code", "_count", "_min", "_max"],
    AggregateUser: ["_count", "_min", "_max"],
    UserGroupBy: ["id", "firstName", "lastName", "email", "streetAddress", "streetAddress2", "city", "stateId", "zip", "phone", "password", "role", "dateCreated", "_count", "_min", "_max"],
    AggregateCustomer: ["_count", "_min", "_max"],
    CustomerGroupBy: ["id", "name", "streetAddress", "streetAddress2", "city", "stateId", "zip", "phone", "dateCreated", "dateUpdated", "_count", "_min", "_max"],
    AggregateCustomerContact: ["_count", "_min", "_max"],
    CustomerContactGroupBy: ["id", "customerId", "firstName", "lastName", "email", "streetAddress", "streetAddress2", "city", "stateId", "zip", "phone", "dateCreated", "dateUpdated", "_count", "_min", "_max"],
    AffectedRowsOutput: ["count"],
    StateCount: ["user", "customer", "customerContact"],
    StateCountAggregate: ["id", "name", "code", "_all"],
    StateMinAggregate: ["id", "name", "code"],
    StateMaxAggregate: ["id", "name", "code"],
    UserCountAggregate: ["id", "firstName", "lastName", "email", "streetAddress", "streetAddress2", "city", "stateId", "zip", "phone", "password", "role", "dateCreated", "_all"],
    UserMinAggregate: ["id", "firstName", "lastName", "email", "streetAddress", "streetAddress2", "city", "stateId", "zip", "phone", "password", "role", "dateCreated"],
    UserMaxAggregate: ["id", "firstName", "lastName", "email", "streetAddress", "streetAddress2", "city", "stateId", "zip", "phone", "password", "role", "dateCreated"],
    CustomerCount: ["CustomerContact"],
    CustomerCountAggregate: ["id", "name", "streetAddress", "streetAddress2", "city", "stateId", "zip", "phone", "dateCreated", "dateUpdated", "_all"],
    CustomerMinAggregate: ["id", "name", "streetAddress", "streetAddress2", "city", "stateId", "zip", "phone", "dateCreated", "dateUpdated"],
    CustomerMaxAggregate: ["id", "name", "streetAddress", "streetAddress2", "city", "stateId", "zip", "phone", "dateCreated", "dateUpdated"],
    CustomerContactCountAggregate: ["id", "customerId", "firstName", "lastName", "email", "streetAddress", "streetAddress2", "city", "stateId", "zip", "phone", "dateCreated", "dateUpdated", "_all"],
    CustomerContactMinAggregate: ["id", "customerId", "firstName", "lastName", "email", "streetAddress", "streetAddress2", "city", "stateId", "zip", "phone", "dateCreated", "dateUpdated"],
    CustomerContactMaxAggregate: ["id", "customerId", "firstName", "lastName", "email", "streetAddress", "streetAddress2", "city", "stateId", "zip", "phone", "dateCreated", "dateUpdated"],
    CreateManyAndReturnState: ["id", "name", "code"],
    CreateManyAndReturnUser: ["id", "firstName", "lastName", "email", "streetAddress", "streetAddress2", "city", "stateId", "zip", "phone", "password", "role", "dateCreated", "state"],
    CreateManyAndReturnCustomer: ["id", "name", "streetAddress", "streetAddress2", "city", "stateId", "zip", "phone", "dateCreated", "dateUpdated", "state"],
    CreateManyAndReturnCustomerContact: ["id", "customerId", "firstName", "lastName", "email", "streetAddress", "streetAddress2", "city", "stateId", "zip", "phone", "dateCreated", "dateUpdated", "customer", "state"]
};
function applyOutputTypesEnhanceMap(outputTypesEnhanceMap) {
    for (const outputTypeEnhanceMapKey of Object.keys(outputTypesEnhanceMap)) {
        const outputTypeName = outputTypeEnhanceMapKey;
        const typeConfig = outputTypesEnhanceMap[outputTypeName];
        const typeClass = outputTypes[outputTypeName];
        const typeTarget = typeClass.prototype;
        applyTypeClassEnhanceConfig(typeConfig, typeClass, typeTarget, outputsInfo[outputTypeName]);
    }
}
const inputsInfo = {
    StateWhereInput: ["AND", "OR", "NOT", "id", "name", "code", "user", "customer", "customerContact"],
    StateOrderByWithRelationInput: ["id", "name", "code", "user", "customer", "customerContact"],
    StateWhereUniqueInput: ["id", "AND", "OR", "NOT", "name", "code", "user", "customer", "customerContact"],
    StateOrderByWithAggregationInput: ["id", "name", "code", "_count", "_max", "_min"],
    StateScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "name", "code"],
    UserWhereInput: ["AND", "OR", "NOT", "id", "firstName", "lastName", "email", "streetAddress", "streetAddress2", "city", "stateId", "zip", "phone", "password", "role", "dateCreated", "state"],
    UserOrderByWithRelationInput: ["id", "firstName", "lastName", "email", "streetAddress", "streetAddress2", "city", "stateId", "zip", "phone", "password", "role", "dateCreated", "state"],
    UserWhereUniqueInput: ["id", "email", "AND", "OR", "NOT", "firstName", "lastName", "streetAddress", "streetAddress2", "city", "stateId", "zip", "phone", "password", "role", "dateCreated", "state"],
    UserOrderByWithAggregationInput: ["id", "firstName", "lastName", "email", "streetAddress", "streetAddress2", "city", "stateId", "zip", "phone", "password", "role", "dateCreated", "_count", "_max", "_min"],
    UserScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "firstName", "lastName", "email", "streetAddress", "streetAddress2", "city", "stateId", "zip", "phone", "password", "role", "dateCreated"],
    CustomerWhereInput: ["AND", "OR", "NOT", "id", "name", "streetAddress", "streetAddress2", "city", "stateId", "zip", "phone", "dateCreated", "dateUpdated", "CustomerContact", "state"],
    CustomerOrderByWithRelationInput: ["id", "name", "streetAddress", "streetAddress2", "city", "stateId", "zip", "phone", "dateCreated", "dateUpdated", "CustomerContact", "state"],
    CustomerWhereUniqueInput: ["id", "AND", "OR", "NOT", "name", "streetAddress", "streetAddress2", "city", "stateId", "zip", "phone", "dateCreated", "dateUpdated", "CustomerContact", "state"],
    CustomerOrderByWithAggregationInput: ["id", "name", "streetAddress", "streetAddress2", "city", "stateId", "zip", "phone", "dateCreated", "dateUpdated", "_count", "_max", "_min"],
    CustomerScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "name", "streetAddress", "streetAddress2", "city", "stateId", "zip", "phone", "dateCreated", "dateUpdated"],
    CustomerContactWhereInput: ["AND", "OR", "NOT", "id", "customerId", "firstName", "lastName", "email", "streetAddress", "streetAddress2", "city", "stateId", "zip", "phone", "dateCreated", "dateUpdated", "customer", "state"],
    CustomerContactOrderByWithRelationInput: ["id", "customerId", "firstName", "lastName", "email", "streetAddress", "streetAddress2", "city", "stateId", "zip", "phone", "dateCreated", "dateUpdated", "customer", "state"],
    CustomerContactWhereUniqueInput: ["id", "AND", "OR", "NOT", "customerId", "firstName", "lastName", "email", "streetAddress", "streetAddress2", "city", "stateId", "zip", "phone", "dateCreated", "dateUpdated", "customer", "state"],
    CustomerContactOrderByWithAggregationInput: ["id", "customerId", "firstName", "lastName", "email", "streetAddress", "streetAddress2", "city", "stateId", "zip", "phone", "dateCreated", "dateUpdated", "_count", "_max", "_min"],
    CustomerContactScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "customerId", "firstName", "lastName", "email", "streetAddress", "streetAddress2", "city", "stateId", "zip", "phone", "dateCreated", "dateUpdated"],
    StateCreateInput: ["id", "name", "code", "user", "customer", "customerContact"],
    StateUpdateInput: ["id", "name", "code", "user", "customer", "customerContact"],
    StateCreateManyInput: ["id", "name", "code"],
    StateUpdateManyMutationInput: ["id", "name", "code"],
    UserCreateInput: ["id", "firstName", "lastName", "email", "streetAddress", "streetAddress2", "city", "zip", "phone", "password", "role", "dateCreated", "state"],
    UserUpdateInput: ["id", "firstName", "lastName", "email", "streetAddress", "streetAddress2", "city", "zip", "phone", "password", "role", "dateCreated", "state"],
    UserCreateManyInput: ["id", "firstName", "lastName", "email", "streetAddress", "streetAddress2", "city", "stateId", "zip", "phone", "password", "role", "dateCreated"],
    UserUpdateManyMutationInput: ["id", "firstName", "lastName", "email", "streetAddress", "streetAddress2", "city", "zip", "phone", "password", "role", "dateCreated"],
    CustomerCreateInput: ["id", "name", "streetAddress", "streetAddress2", "city", "zip", "phone", "dateCreated", "dateUpdated", "CustomerContact", "state"],
    CustomerUpdateInput: ["id", "name", "streetAddress", "streetAddress2", "city", "zip", "phone", "dateCreated", "dateUpdated", "CustomerContact", "state"],
    CustomerCreateManyInput: ["id", "name", "streetAddress", "streetAddress2", "city", "stateId", "zip", "phone", "dateCreated", "dateUpdated"],
    CustomerUpdateManyMutationInput: ["id", "name", "streetAddress", "streetAddress2", "city", "zip", "phone", "dateCreated", "dateUpdated"],
    CustomerContactCreateInput: ["id", "firstName", "lastName", "email", "streetAddress", "streetAddress2", "city", "zip", "phone", "dateCreated", "dateUpdated", "customer", "state"],
    CustomerContactUpdateInput: ["id", "firstName", "lastName", "email", "streetAddress", "streetAddress2", "city", "zip", "phone", "dateCreated", "dateUpdated", "customer", "state"],
    CustomerContactCreateManyInput: ["id", "customerId", "firstName", "lastName", "email", "streetAddress", "streetAddress2", "city", "stateId", "zip", "phone", "dateCreated", "dateUpdated"],
    CustomerContactUpdateManyMutationInput: ["id", "firstName", "lastName", "email", "streetAddress", "streetAddress2", "city", "zip", "phone", "dateCreated", "dateUpdated"],
    StringFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not"],
    UserListRelationFilter: ["every", "some", "none"],
    CustomerListRelationFilter: ["every", "some", "none"],
    CustomerContactListRelationFilter: ["every", "some", "none"],
    UserOrderByRelationAggregateInput: ["_count"],
    CustomerOrderByRelationAggregateInput: ["_count"],
    CustomerContactOrderByRelationAggregateInput: ["_count"],
    StateCountOrderByAggregateInput: ["id", "name", "code"],
    StateMaxOrderByAggregateInput: ["id", "name", "code"],
    StateMinOrderByAggregateInput: ["id", "name", "code"],
    StringWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not", "_count", "_min", "_max"],
    StringNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not"],
    DateTimeFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    StateRelationFilter: ["is", "isNot"],
    SortOrderInput: ["sort", "nulls"],
    UserCountOrderByAggregateInput: ["id", "firstName", "lastName", "email", "streetAddress", "streetAddress2", "city", "stateId", "zip", "phone", "password", "role", "dateCreated"],
    UserMaxOrderByAggregateInput: ["id", "firstName", "lastName", "email", "streetAddress", "streetAddress2", "city", "stateId", "zip", "phone", "password", "role", "dateCreated"],
    UserMinOrderByAggregateInput: ["id", "firstName", "lastName", "email", "streetAddress", "streetAddress2", "city", "stateId", "zip", "phone", "password", "role", "dateCreated"],
    StringNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not", "_count", "_min", "_max"],
    DateTimeWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_min", "_max"],
    CustomerCountOrderByAggregateInput: ["id", "name", "streetAddress", "streetAddress2", "city", "stateId", "zip", "phone", "dateCreated", "dateUpdated"],
    CustomerMaxOrderByAggregateInput: ["id", "name", "streetAddress", "streetAddress2", "city", "stateId", "zip", "phone", "dateCreated", "dateUpdated"],
    CustomerMinOrderByAggregateInput: ["id", "name", "streetAddress", "streetAddress2", "city", "stateId", "zip", "phone", "dateCreated", "dateUpdated"],
    CustomerRelationFilter: ["is", "isNot"],
    CustomerContactCountOrderByAggregateInput: ["id", "customerId", "firstName", "lastName", "email", "streetAddress", "streetAddress2", "city", "stateId", "zip", "phone", "dateCreated", "dateUpdated"],
    CustomerContactMaxOrderByAggregateInput: ["id", "customerId", "firstName", "lastName", "email", "streetAddress", "streetAddress2", "city", "stateId", "zip", "phone", "dateCreated", "dateUpdated"],
    CustomerContactMinOrderByAggregateInput: ["id", "customerId", "firstName", "lastName", "email", "streetAddress", "streetAddress2", "city", "stateId", "zip", "phone", "dateCreated", "dateUpdated"],
    UserCreateNestedManyWithoutStateInput: ["create", "connectOrCreate", "createMany", "connect"],
    CustomerCreateNestedManyWithoutStateInput: ["create", "connectOrCreate", "createMany", "connect"],
    CustomerContactCreateNestedManyWithoutStateInput: ["create", "connectOrCreate", "createMany", "connect"],
    StringFieldUpdateOperationsInput: ["set"],
    UserUpdateManyWithoutStateNestedInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    CustomerUpdateManyWithoutStateNestedInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    CustomerContactUpdateManyWithoutStateNestedInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    StateCreateNestedOneWithoutUserInput: ["create", "connectOrCreate", "connect"],
    NullableStringFieldUpdateOperationsInput: ["set"],
    DateTimeFieldUpdateOperationsInput: ["set"],
    StateUpdateOneRequiredWithoutUserNestedInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    CustomerContactCreateNestedManyWithoutCustomerInput: ["create", "connectOrCreate", "createMany", "connect"],
    StateCreateNestedOneWithoutCustomerInput: ["create", "connectOrCreate", "connect"],
    CustomerContactUpdateManyWithoutCustomerNestedInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    StateUpdateOneRequiredWithoutCustomerNestedInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    CustomerCreateNestedOneWithoutCustomerContactInput: ["create", "connectOrCreate", "connect"],
    StateCreateNestedOneWithoutCustomerContactInput: ["create", "connectOrCreate", "connect"],
    CustomerUpdateOneRequiredWithoutCustomerContactNestedInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    StateUpdateOneRequiredWithoutCustomerContactNestedInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    NestedStringFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not"],
    NestedStringWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not", "_count", "_min", "_max"],
    NestedIntFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    NestedStringNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not"],
    NestedDateTimeFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    NestedStringNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not", "_count", "_min", "_max"],
    NestedIntNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    NestedDateTimeWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_min", "_max"],
    UserCreateWithoutStateInput: ["id", "firstName", "lastName", "email", "streetAddress", "streetAddress2", "city", "zip", "phone", "password", "role", "dateCreated"],
    UserCreateOrConnectWithoutStateInput: ["where", "create"],
    UserCreateManyStateInputEnvelope: ["data"],
    CustomerCreateWithoutStateInput: ["id", "name", "streetAddress", "streetAddress2", "city", "zip", "phone", "dateCreated", "dateUpdated", "CustomerContact"],
    CustomerCreateOrConnectWithoutStateInput: ["where", "create"],
    CustomerCreateManyStateInputEnvelope: ["data"],
    CustomerContactCreateWithoutStateInput: ["id", "firstName", "lastName", "email", "streetAddress", "streetAddress2", "city", "zip", "phone", "dateCreated", "dateUpdated", "customer"],
    CustomerContactCreateOrConnectWithoutStateInput: ["where", "create"],
    CustomerContactCreateManyStateInputEnvelope: ["data"],
    UserUpsertWithWhereUniqueWithoutStateInput: ["where", "update", "create"],
    UserUpdateWithWhereUniqueWithoutStateInput: ["where", "data"],
    UserUpdateManyWithWhereWithoutStateInput: ["where", "data"],
    UserScalarWhereInput: ["AND", "OR", "NOT", "id", "firstName", "lastName", "email", "streetAddress", "streetAddress2", "city", "stateId", "zip", "phone", "password", "role", "dateCreated"],
    CustomerUpsertWithWhereUniqueWithoutStateInput: ["where", "update", "create"],
    CustomerUpdateWithWhereUniqueWithoutStateInput: ["where", "data"],
    CustomerUpdateManyWithWhereWithoutStateInput: ["where", "data"],
    CustomerScalarWhereInput: ["AND", "OR", "NOT", "id", "name", "streetAddress", "streetAddress2", "city", "stateId", "zip", "phone", "dateCreated", "dateUpdated"],
    CustomerContactUpsertWithWhereUniqueWithoutStateInput: ["where", "update", "create"],
    CustomerContactUpdateWithWhereUniqueWithoutStateInput: ["where", "data"],
    CustomerContactUpdateManyWithWhereWithoutStateInput: ["where", "data"],
    CustomerContactScalarWhereInput: ["AND", "OR", "NOT", "id", "customerId", "firstName", "lastName", "email", "streetAddress", "streetAddress2", "city", "stateId", "zip", "phone", "dateCreated", "dateUpdated"],
    StateCreateWithoutUserInput: ["id", "name", "code", "customer", "customerContact"],
    StateCreateOrConnectWithoutUserInput: ["where", "create"],
    StateUpsertWithoutUserInput: ["update", "create", "where"],
    StateUpdateToOneWithWhereWithoutUserInput: ["where", "data"],
    StateUpdateWithoutUserInput: ["id", "name", "code", "customer", "customerContact"],
    CustomerContactCreateWithoutCustomerInput: ["id", "firstName", "lastName", "email", "streetAddress", "streetAddress2", "city", "zip", "phone", "dateCreated", "dateUpdated", "state"],
    CustomerContactCreateOrConnectWithoutCustomerInput: ["where", "create"],
    CustomerContactCreateManyCustomerInputEnvelope: ["data"],
    StateCreateWithoutCustomerInput: ["id", "name", "code", "user", "customerContact"],
    StateCreateOrConnectWithoutCustomerInput: ["where", "create"],
    CustomerContactUpsertWithWhereUniqueWithoutCustomerInput: ["where", "update", "create"],
    CustomerContactUpdateWithWhereUniqueWithoutCustomerInput: ["where", "data"],
    CustomerContactUpdateManyWithWhereWithoutCustomerInput: ["where", "data"],
    StateUpsertWithoutCustomerInput: ["update", "create", "where"],
    StateUpdateToOneWithWhereWithoutCustomerInput: ["where", "data"],
    StateUpdateWithoutCustomerInput: ["id", "name", "code", "user", "customerContact"],
    CustomerCreateWithoutCustomerContactInput: ["id", "name", "streetAddress", "streetAddress2", "city", "zip", "phone", "dateCreated", "dateUpdated", "state"],
    CustomerCreateOrConnectWithoutCustomerContactInput: ["where", "create"],
    StateCreateWithoutCustomerContactInput: ["id", "name", "code", "user", "customer"],
    StateCreateOrConnectWithoutCustomerContactInput: ["where", "create"],
    CustomerUpsertWithoutCustomerContactInput: ["update", "create", "where"],
    CustomerUpdateToOneWithWhereWithoutCustomerContactInput: ["where", "data"],
    CustomerUpdateWithoutCustomerContactInput: ["id", "name", "streetAddress", "streetAddress2", "city", "zip", "phone", "dateCreated", "dateUpdated", "state"],
    StateUpsertWithoutCustomerContactInput: ["update", "create", "where"],
    StateUpdateToOneWithWhereWithoutCustomerContactInput: ["where", "data"],
    StateUpdateWithoutCustomerContactInput: ["id", "name", "code", "user", "customer"],
    UserCreateManyStateInput: ["id", "firstName", "lastName", "email", "streetAddress", "streetAddress2", "city", "zip", "phone", "password", "role", "dateCreated"],
    CustomerCreateManyStateInput: ["id", "name", "streetAddress", "streetAddress2", "city", "zip", "phone", "dateCreated", "dateUpdated"],
    CustomerContactCreateManyStateInput: ["id", "customerId", "firstName", "lastName", "email", "streetAddress", "streetAddress2", "city", "zip", "phone", "dateCreated", "dateUpdated"],
    UserUpdateWithoutStateInput: ["id", "firstName", "lastName", "email", "streetAddress", "streetAddress2", "city", "zip", "phone", "password", "role", "dateCreated"],
    CustomerUpdateWithoutStateInput: ["id", "name", "streetAddress", "streetAddress2", "city", "zip", "phone", "dateCreated", "dateUpdated", "CustomerContact"],
    CustomerContactUpdateWithoutStateInput: ["id", "firstName", "lastName", "email", "streetAddress", "streetAddress2", "city", "zip", "phone", "dateCreated", "dateUpdated", "customer"],
    CustomerContactCreateManyCustomerInput: ["id", "firstName", "lastName", "email", "streetAddress", "streetAddress2", "city", "stateId", "zip", "phone", "dateCreated", "dateUpdated"],
    CustomerContactUpdateWithoutCustomerInput: ["id", "firstName", "lastName", "email", "streetAddress", "streetAddress2", "city", "zip", "phone", "dateCreated", "dateUpdated", "state"]
};
function applyInputTypesEnhanceMap(inputTypesEnhanceMap) {
    for (const inputTypeEnhanceMapKey of Object.keys(inputTypesEnhanceMap)) {
        const inputTypeName = inputTypeEnhanceMapKey;
        const typeConfig = inputTypesEnhanceMap[inputTypeName];
        const typeClass = inputTypes[inputTypeName];
        const typeTarget = typeClass.prototype;
        applyTypeClassEnhanceConfig(typeConfig, typeClass, typeTarget, inputsInfo[inputTypeName]);
    }
}
